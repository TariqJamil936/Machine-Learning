
# üìò Pandas CSV File Handling ‚Äî Summary

This project demonstrates how to efficiently read and handle CSV files using Pandas, one of the most powerful Python libraries for data analysis. It covers practical examples of reading files from local storage, URLs, and handling different file formats, encodings, and large datasets.

Throughout the code, multiple datasets are used to show various real-world use cases. The primary dataset is aug_train.csv, commonly used for HR analytics tasks. Other datasets such as test.csv, movie_titles_metadata.tsv, zomato.csv, BX-Books.csv, IPL Matches 2008-2020.csv, and countries.csv are also included to demonstrate different scenarios and parameters.

The tutorial starts by importing Pandas, then proceeds to load data from both local files and URLs using the `requests` library. It demonstrates how to use important parameters of the `read_csv()` function ‚Äî including `sep` for specifying separators, `index_col` for setting index columns, `header` for choosing header rows, and `usecols` for selecting specific columns. The `squeeze` option (now deprecated) is shown for reading a single column as a Series.

It also highlights how to limit the number of rows with `nrows`, manage text encodings like `latin-1`, and skip invalid or malformed rows with `error_bad_lines=False`. Type conversion using the `dtype` parameter ensures correct data formats, while `parse_dates` automatically converts date strings into proper datetime objects.

Custom data transformation is demonstrated using the `converters` parameter with a user-defined function that renames teams in the IPL dataset. Missing values are handled with na_values, converting specified entries such as ‚ÄúMale‚Äù into `NaN`. Finally, for handling very large datasets, the `chunksize` parameter is used to load data in smaller portions (e.g., 5000 rows per chunk), allowing memory-efficient processing.

Overall, this project serves as a comprehensive reference for working with CSV data in Pandas, covering everything from reading basic files to managing large-scale datasets, custom transformations, encodings, and missing values.


üìö Datasets Used

| Dataset Name              | Description                                            |
| --------------------------| ------------------------------------------------------ |
| aug_train.csv             | HR analytics dataset used in most examples.            |
| test.csv                  | Sample dataset used to demonstrate header options.     |
| movie_titles_metadata.tsv | Tab-separated movie data for separator examples.       |
| zomato.csv                | Restaurant dataset for encoding handling.              |
| BX-Books.csv              | Book dataset showing how to skip malformed rows.       |
| IPL Matches 2008-2020.csv | Cricket dataset used for date parsing and converters.  |
| countries.csv             | Dataset fetched from GitHub to show web-based reading. |


This summarized guide provides a practical overview of how to load, clean, and transform data efficiently using Pandas, making it an essential reference for anyone working on data analysis or machine learning projects.
